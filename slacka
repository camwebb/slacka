#!/usr/bin/gawk -f

# Scopes needed:
#  channels:history
#  channels:read
#  groups:history   # private channels
#  groups:read      # private channels
#  users:read       # user names
#  chat:write       # posting

@load "json" 

BEGIN{

  config()
  
  if (ARGC == 1) {
    print "Usage:\n  Maintenance: slacka users | chans | cfg"
    print "  Read:        slacka <channel> [ <thread_id> ]    "\
      "where <channel> is:"
    PROCINFO["sorted_in"] = "@ind_str_asc"
    printf "         "
    for (i in ChanID)
      printf "%s, ", i
    print ""
    print "  Write:       slacka <channel> [ new | <thread_id> ]"\
      " \"your message\""

    exit 0
  }
  
  else if (ARGC == 2) {
    if (ARGV[1] == "users")
      make_users()
    else if (ARGV[1] == "chans")
      list_channels()
    else if (ARGV[1] == "cfg") {
      system("emacs " ENVIRON["HOME"] "/.config/slacka/config.json")
      exit 0
    }
    else if (!ChanID[ARGV[1]]) {
      print "No such channel label" > "/dev/stderr"
      exit 1
    }
    else {
      read_users()
      # team_names(ChanTeam[ARGV[1]])
      list_conv(ChanTeam[ARGV[1]], ChanID[ARGV[1]])
    }
  }
  
  else if (ARGC == 3) {
    if (!ChanID[ARGV[1]]) {
      print "No such channel label" > "/dev/stderr"
      exit 1
    }
    else {
      read_users()
      # team_names(ChanTeam[ARGV[1]])
      thread(ChanTeam[ARGV[1]], ChanID[ARGV[1]], ARGV[2])
    }
  }

  else if (ARGC == 4) {
    if (!ChanID[ARGV[1]]) {
      print "No such channel label" > "/dev/stderr"
      exit 1
    }
    else {
      post(ChanTeam[ARGV[1]], ChanID[ARGV[1]], ARGV[2], ARGV[3])
    }
  }

}

function post(team, channel, ts, text      ) {
  cmd = "curl -X POST -L -s "                                     \
    "-H 'Authorization: Bearer " Token[team]  "' "                \
    "-H 'Content-type: application/x-www-form-urlencoded' "       \
    "--data-urlencode 'channel=" channel "' "                     \
    "--data-urlencode \"text=" text "\" "    
  if (ts != "new")
    cmd = cmd "--data-urlencode 'thread_ts=" ts "' "
  cmd = cmd "https://slack.com/api/chat.postMessage"

  # not needed "--data-urlencode 'as_user=true' "        

  RS="\x04";
  cmd | getline json
  if (! json_fromJSON(json, data)) {
    print "JSON import failed!" > "/dev/stderr"
    exit 1
  }

  if (data["ok"] == 1) {
    print "Success"
    exit 0
  }
  else {
    print "Posting failed"
    exit 1
  }
}

function list_conv(team, channel,     cmd, json, data, date, name, plus, msg, i) {
  
  # cmd = "curl -X POST -L -s "                               \
  #   "-H 'Authorization: Bearer " TOKEN  "' "                \
  #   "-H 'Content-type: application/x-www-form-urlencoded' " \
  #   "--data-urlencode 'channel=" channel "' "               \
  #   "https://slack.com/api/conversations.history"

  cmd = "curl -L -s "                                               \
    "-H 'Authorization: Bearer " Token[team]  "' "                      \
    "'https://slack.com/api/conversations.history?channel=" channel "'"
  
  RS="\x04";
  cmd | getline json
  if (! json_fromJSON(json, data)) {
    print "JSON import failed!" > "/dev/stderr"
    exit 1
  }
  # walk_array(data, "data");

  print ""
  for (i = 10; i >= 1; i--) {
    if (Name[data["messages"][i]["user"]])
      name = Name[data["messages"][i]["user"]]
    else
      name = data["messages"][i]["user"]
    if (data["messages"][i]["latest_reply"])
      date = strftime("[%m-%d..",data["messages"][i]["ts"])      \
        strftime("%m-%d]", data["messages"][i]["latest_reply"])
    else
      date = strftime("[%m-%d]",data["messages"][i]["ts"])
    if (data["messages"][i]["reply_count"])
      plus = "(+" data["messages"][i]["reply_count"] ")"
    else
      plus = "(+0)"

    print "\x1b[38;5;11m" "<" name "> " "\x1b[0;m" plus " " date           \
      " ( " data["messages"][i]["ts"] " )\n" 
    msg = gensub(/\n/," // ", "G", data["messages"][i]["text"])
    msg_block(msg)
    print ""
  }
}

function thread(team, channel, ts,     name, cmd, json, data, msg, i) {
  
  cmd = "curl -L -s "                                               \
    "-H 'Authorization: Bearer " Token[team]  "' "                        \
    "'https://slack.com/api/conversations.replies?channel=" channel "&"\
    "ts=" ts "'"
  
  RS="\x04";
  cmd | getline json
  if (! json_fromJSON(json, data)) {
    print "JSON import failed!" > "/dev/stderr"
    exit 1
  }
  # walk_array(data, "data");

  print ""
  PROCINFO["sorted_in"] = "@ind_num_asc"
  for (i in data["messages"]) {
    if (Name[data["messages"][i]["user"]])
      name = Name[data["messages"][i]["user"]]
    else
      name = data["messages"][i]["user"]
    print "\x1b[38;5;11m" "<" name "> " "\x1b[0;m" \
      strftime("[%m-%d %a %H:%M] ",data["messages"][i]["ts"]) "\n"
    msg = gensub(/\n/," // ", "G", data["messages"][i]["text"])
    msg_block(msg)
    print ""
  }
}

function msg_block(msg,     j, lines, ec, bc, dash, width) {
  width = 70
  for (j in Name)   # names not in users.json are left as is
    gsub(("<@" j ">"), ("<@" Name[j] ">"), msg)
  lines = int((length(msg)-1) / width) + 1
  for (j = 1; j <= lines; j++) {
    ec = substr(msg,(j*width),1)
    bc = substr(msg,(j*width)+1,1)
    dash = (ec && (ec!=" ") && bc && (bc!=" ")) ? "-" : ""
    print "    " gensub(/^ */,"","G",substr(msg,((j-1)*width)+1,width)) dash
  }
}

function list_channels(  cmd, json, data, i) {
  PROCINFO["sorted_in"] = "@ind_num_asc"

  for (c in Token) {
    cmd = "curl -L -s -H 'Authorization: Bearer " Token[c]  \
      "' 'https://slack.com/api/conversations.list"         \
      "?types=public_channel,private_channel'"
    RS="\x04";
    cmd | getline json
    if (! json_fromJSON(json, data)) {
      print "JSON import failed!" > "/dev/stderr"
      exit 1
    }
    # walk_array(data, "data");

    print "TEAM: " c
    for (i in data["channels"]) 
      printf "  %-12s : %-50s (priv=%s)\n", data["channels"][i]["id"], \
        data["channels"][i]["name"] , data["channels"][i]["is_private"]
    print ""
  }
}

function team_names(team,   cmd, json, data) {
  cmd = "curl -L -s -H 'Authorization: Bearer " Token[team]   \
    "' 'https://slack.com/api/users.list?team_id=" team "'"
  RS="\x04";
  cmd | getline json
  if (! json_fromJSON(json, data)) {
    print "JSON import failed!" > "/dev/stderr"
    exit 1
  }
  
  for (i in data["members"])
    Name[data["members"][i]["id"]] = \
      data["members"][i]["profile"]["real_name_normalized"]
}

function walk_array(arr, name,      i) {
  for (i in arr) {
    if (isarray(arr[i]))
      walk_array(arr[i], (name "[" i "]"))
    else
      printf("%s[%s] = %s\n", name, i, arr[i])
  }
}

function config(    json, data, i, j) {
  RS="\x04";
  getline json < (ENVIRON["HOME"] "/.config/slacka/config.json")
  if (! json_fromJSON(json, data)) {
    print "JSON import failed. Check for config at " ENVIRON["HOME"]    \
      "/.config/slacka/config.json" > "/dev/stderr"
    exit 1
  }
  # walk_array(data, "data")

  # Todo: add error checking
  for (i in data["teams"]) {
    Token[data["teams"][i]["id"]] = data["teams"][i]["token"]
    
    for (j in data["teams"][i]["channels"]) {
      if (data["teams"][i]["channels"][j]["label"] ~ /^(users|chans|cfg)%/) {
        print "Protected labels: '" data["teams"][i]["channels"][j]["label"]\
          "'" > "/dev/stderr"
        exit 1
      }
      if (ChanID[data["teams"][i]["channels"][j]["label"]]) {
        print "Duplicate label: '" data["teams"][i]["channels"][j]["label"] \
          "'" > "/dev/stderr"
        exit 1
      }
      else {
        ChanID[data["teams"][i]["channels"][j]["label"]] =  \
          data["teams"][i]["channels"][j]["id"]
        ChanTeam[data["teams"][i]["channels"][j]["label"]] =    \
          data["teams"][i]["id"]
      }
    }
  }
}

function read_users(    json, data, i, j) {
  RS="\x04";
  getline json < (ENVIRON["HOME"] "/.config/slacka/users.json")
  if (! json_fromJSON(json, data)) {
    print "JSON import failed. Check for " ENVIRON["HOME"]          \
      "/.config/slacka/users.json\n  Generate with: slacka users" > \
      "/dev/stderr"
    exit 1
  }
  
  for (i in data)
    Name[data[i]["id"]] = data[i]["name"]
}

function make_users(    json, data, name, i, j) {
  for (i in Token) {
    cmd = "curl -L -s -H 'Authorization: Bearer " Token[i]  \
      "' 'https://slack.com/api/users.list?team_id=" i "'"
    RS="\x04";
    cmd | getline json
    if (! json_fromJSON(json, data)) {
      print "JSON import failed!" > "/dev/stderr"
      exit 1
    }

    for (j in data["members"])
      name[data["members"][j]["id"]] =                          \
        data["members"][j]["profile"]["real_name_normalized"]
  }
  
  # Todo: check for directory
  json = "["
  for (i in name)
    json = json "{\"id\":\"" i "\",\"name\":\"" name[i] "\"},"
  json = substr(json,1,length(json)-1) "]"
  print json > (ENVIRON["HOME"] "/.config/slacka/users.json")
  print "Users updated successfully"
  exit 0
}
